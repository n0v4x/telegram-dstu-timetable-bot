import { Context } from "telegraf";
import Scene from "telegraf/scenes/base";
import { leave } from "telegraf/stage";
import menu from "../../menu";
import { GroupList } from "../../lib/parsers/DstuGroupListParser";

const MIN_LEN = 3;
const MAX_LEN = 20;
const ALLOWED_RANGE_CHARACTERS = "[a-z–∞-—è0-9]";

const MAX_FOUND = 6;

const TEST_REGEX = new RegExp(`^${ALLOWED_RANGE_CHARACTERS}+$`, "i");
const REPLACE_REGEX = new RegExp(`${ALLOWED_RANGE_CHARACTERS}`, "ig");

const search = new Scene("search");

search.enter(async (ctx: Context) => {
  ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: ");
});

search.leave(async (ctx: Context) => {
  await menu.replyToContext(ctx, "/foundGroups/");

  const { search } = ctx.session;

  if (search.error) {
    delete search.error;
  }

  if (search.foundGroups && search.foundGroups.length === 0) {
    delete search.foundGroups;
  }
});

search.on("text", async (ctx: Context) => {
  const groupName = ctx.message?.text || "";

  let groupList: GroupList | undefined;
  let error: string | undefined;

  if (groupName.length < MIN_LEN) {
    error = `‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: ${MIN_LEN}`;
  } else if (groupName.length > MAX_LEN) {
    error = `‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: ${MAX_LEN}`;
  } else if (!TEST_REGEX.test(groupName)) {
    error = `‚ö†Ô∏è –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: "${groupName.replace(REPLACE_REGEX, "")}"`;
  } else {
    const searchNotifyMsg = await ctx.reply("üîé –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã...");

    try {
      groupList = await ctx.dstu.findGroup(groupName);
    } catch (e) {
      console.log(e);
      error = "üòû –ù–µ—É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É.\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n–°–∞–π—Ç–∏ –î–ì–¢–£ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.";
    } finally {
      await ctx.deleteMessage(searchNotifyMsg.message_id);
    }

    if (groupList && groupList.groups.length === 0) {
      error = "üòû –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.";
    }
  }

  const { search } = ctx.session;

  search.error = error;
  search.foundGroups = groupList ? groupList.groups.slice(0, MAX_FOUND) : [];

  ctx.scene.leave();
});

export default search;
